/* Flexbox is a way to arrange items into rows or columns, where those items will flex (i.e. grow or shrink) based on some simple rules that you can define */
/* https://www.theodinproject.com/paths/foundations/courses/foundations/lessons/introduction-to-flexbox */
.flex-container {
    background: lightblue;
    height: 140px;
    padding: 16px;
    border: 4px solid blue;

    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    gap: 8px;
}

.item-one,
.item-two,
.item-three {
    background: peachpuff;
    border: 4px solid salmon;
    width: 60px;
    height: 60px;
    padding: 6px;
}



/*
justify-content aligns items across the --main axis--. There are a few values that you can use here. You’ll learn the rest of them in the reading assignments, but for now try changing it to center, which should center the boxes along the main axis.

To change the placement of items along the --cross axis-- use align-items. Try getting the boxes to the center of the container by adding align-items: center to .container. The desired result looks like this:
*/


/* Regarding flex
The default value of the flex property is shown in the above screenshot: flex-grow: 0, flex-shrink: 1, flex-basis: 0%. Very often you see the flex shorthand defined with only one value. In that case, that value is applied to flex-grow, so when we put flex: 1 on our divs, we were actually specifying flex: 1 1 0%.

##################
flex-grow
flex-grow expects a single number as its value, and that number is used as the flex-item’s “growth factor”. When we applied flex: 1 to every div inside our container, we were telling every div to grow the same amount. The result of this is that every div ends up the exact same size. If we instead add flex: 2 to just one of the divs, then that div would grow to 2x the size of the others.

##################
flex-shrink
flex-shrink is similar to flex-grow, but sets the “shrink factor” of a flex item. flex-shrink only ends up being applied if the size of all flex items is larger than their parent container. For example, if our 3 divs from above had a width declaration like: width: 100px, and .flex-container was smaller than 300px, our divs would have to shrink to fit.

The default shrink factor is flex-shrink: 1, which means all items will shrink evenly. If you do not want an item to shrink then you can specify flex-shrink: 0;. You can also specify higher numbers to make certain items shrink at a higher rate than normal.

##################
flex-basis

flex-basis simply sets the initial size of a flex item, so any sort of flex-growing or flex-shrinking starts from that baseline size. The shorthand value defaults to flex-basis: 0%. The reason we had to change it to auto in the flex-shrink example is that with the basis set to 0, those items would ignore the item’s width, and everything would shrink evenly. Using auto as a flex-basis tells the item to check for a width declaration (width: 250px).

https://www.theodinproject.com/paths/foundations/courses/foundations/lessons/growing-and-shrinking
#################